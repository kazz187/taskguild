// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taskguild/v1/eventservice.proto

package taskguildv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kazz187/taskguild/proto/gen/go/taskguild/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "taskguild.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceGetEventLogsProcedure is the fully-qualified name of the EventService's GetEventLogs
	// RPC.
	EventServiceGetEventLogsProcedure = "/taskguild.v1.EventService/GetEventLogs"
	// EventServiceSubscribeEventsProcedure is the fully-qualified name of the EventService's
	// SubscribeEvents RPC.
	EventServiceSubscribeEventsProcedure = "/taskguild.v1.EventService/SubscribeEvents"
	// EventServicePublishEventProcedure is the fully-qualified name of the EventService's PublishEvent
	// RPC.
	EventServicePublishEventProcedure = "/taskguild.v1.EventService/PublishEvent"
)

// EventServiceClient is a client for the taskguild.v1.EventService service.
type EventServiceClient interface {
	// Get event logs
	GetEventLogs(context.Context, *connect.Request[v1.GetEventLogsRequest]) (*connect.Response[v1.GetEventLogsResponse], error)
	// Subscribe to events (streaming)
	SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest]) (*connect.ServerStreamForClient[v1.EventMessage], error)
	// Publish an event
	PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error)
}

// NewEventServiceClient constructs a client for the taskguild.v1.EventService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventServiceMethods := v1.File_taskguild_v1_eventservice_proto.Services().ByName("EventService").Methods()
	return &eventServiceClient{
		getEventLogs: connect.NewClient[v1.GetEventLogsRequest, v1.GetEventLogsResponse](
			httpClient,
			baseURL+EventServiceGetEventLogsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("GetEventLogs")),
			connect.WithClientOptions(opts...),
		),
		subscribeEvents: connect.NewClient[v1.SubscribeEventsRequest, v1.EventMessage](
			httpClient,
			baseURL+EventServiceSubscribeEventsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("SubscribeEvents")),
			connect.WithClientOptions(opts...),
		),
		publishEvent: connect.NewClient[v1.PublishEventRequest, v1.PublishEventResponse](
			httpClient,
			baseURL+EventServicePublishEventProcedure,
			connect.WithSchema(eventServiceMethods.ByName("PublishEvent")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	getEventLogs    *connect.Client[v1.GetEventLogsRequest, v1.GetEventLogsResponse]
	subscribeEvents *connect.Client[v1.SubscribeEventsRequest, v1.EventMessage]
	publishEvent    *connect.Client[v1.PublishEventRequest, v1.PublishEventResponse]
}

// GetEventLogs calls taskguild.v1.EventService.GetEventLogs.
func (c *eventServiceClient) GetEventLogs(ctx context.Context, req *connect.Request[v1.GetEventLogsRequest]) (*connect.Response[v1.GetEventLogsResponse], error) {
	return c.getEventLogs.CallUnary(ctx, req)
}

// SubscribeEvents calls taskguild.v1.EventService.SubscribeEvents.
func (c *eventServiceClient) SubscribeEvents(ctx context.Context, req *connect.Request[v1.SubscribeEventsRequest]) (*connect.ServerStreamForClient[v1.EventMessage], error) {
	return c.subscribeEvents.CallServerStream(ctx, req)
}

// PublishEvent calls taskguild.v1.EventService.PublishEvent.
func (c *eventServiceClient) PublishEvent(ctx context.Context, req *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error) {
	return c.publishEvent.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the taskguild.v1.EventService service.
type EventServiceHandler interface {
	// Get event logs
	GetEventLogs(context.Context, *connect.Request[v1.GetEventLogsRequest]) (*connect.Response[v1.GetEventLogsResponse], error)
	// Subscribe to events (streaming)
	SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest], *connect.ServerStream[v1.EventMessage]) error
	// Publish an event
	PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceMethods := v1.File_taskguild_v1_eventservice_proto.Services().ByName("EventService").Methods()
	eventServiceGetEventLogsHandler := connect.NewUnaryHandler(
		EventServiceGetEventLogsProcedure,
		svc.GetEventLogs,
		connect.WithSchema(eventServiceMethods.ByName("GetEventLogs")),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceSubscribeEventsHandler := connect.NewServerStreamHandler(
		EventServiceSubscribeEventsProcedure,
		svc.SubscribeEvents,
		connect.WithSchema(eventServiceMethods.ByName("SubscribeEvents")),
		connect.WithHandlerOptions(opts...),
	)
	eventServicePublishEventHandler := connect.NewUnaryHandler(
		EventServicePublishEventProcedure,
		svc.PublishEvent,
		connect.WithSchema(eventServiceMethods.ByName("PublishEvent")),
		connect.WithHandlerOptions(opts...),
	)
	return "/taskguild.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceGetEventLogsProcedure:
			eventServiceGetEventLogsHandler.ServeHTTP(w, r)
		case EventServiceSubscribeEventsProcedure:
			eventServiceSubscribeEventsHandler.ServeHTTP(w, r)
		case EventServicePublishEventProcedure:
			eventServicePublishEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) GetEventLogs(context.Context, *connect.Request[v1.GetEventLogsRequest]) (*connect.Response[v1.GetEventLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.EventService.GetEventLogs is not implemented"))
}

func (UnimplementedEventServiceHandler) SubscribeEvents(context.Context, *connect.Request[v1.SubscribeEventsRequest], *connect.ServerStream[v1.EventMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.EventService.SubscribeEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.EventService.PublishEvent is not implemented"))
}
