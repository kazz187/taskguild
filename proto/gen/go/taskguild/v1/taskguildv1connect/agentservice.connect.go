// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taskguild/v1/agentservice.proto

package taskguildv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kazz187/taskguild/proto/gen/go/taskguild/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "taskguild.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceListAgentsProcedure is the fully-qualified name of the AgentService's ListAgents RPC.
	AgentServiceListAgentsProcedure = "/taskguild.v1.AgentService/ListAgents"
	// AgentServiceGetAgentProcedure is the fully-qualified name of the AgentService's GetAgent RPC.
	AgentServiceGetAgentProcedure = "/taskguild.v1.AgentService/GetAgent"
	// AgentServiceStartAgentProcedure is the fully-qualified name of the AgentService's StartAgent RPC.
	AgentServiceStartAgentProcedure = "/taskguild.v1.AgentService/StartAgent"
	// AgentServiceStopAgentProcedure is the fully-qualified name of the AgentService's StopAgent RPC.
	AgentServiceStopAgentProcedure = "/taskguild.v1.AgentService/StopAgent"
	// AgentServiceGetAgentStatusProcedure is the fully-qualified name of the AgentService's
	// GetAgentStatus RPC.
	AgentServiceGetAgentStatusProcedure = "/taskguild.v1.AgentService/GetAgentStatus"
	// AgentServiceScaleAgentProcedure is the fully-qualified name of the AgentService's ScaleAgent RPC.
	AgentServiceScaleAgentProcedure = "/taskguild.v1.AgentService/ScaleAgent"
)

// AgentServiceClient is a client for the taskguild.v1.AgentService service.
type AgentServiceClient interface {
	// List all agents
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
	// Get agent details
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	// Start an agent
	StartAgent(context.Context, *connect.Request[v1.StartAgentRequest]) (*connect.Response[v1.StartAgentResponse], error)
	// Stop an agent
	StopAgent(context.Context, *connect.Request[v1.StopAgentRequest]) (*connect.Response[v1.StopAgentResponse], error)
	// Get agent status
	GetAgentStatus(context.Context, *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.GetAgentStatusResponse], error)
	// Scale agents
	ScaleAgent(context.Context, *connect.Request[v1.ScaleAgentRequest]) (*connect.Response[v1.ScaleAgentResponse], error)
}

// NewAgentServiceClient constructs a client for the taskguild.v1.AgentService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentServiceMethods := v1.File_taskguild_v1_agentservice_proto.Services().ByName("AgentService").Methods()
	return &agentServiceClient{
		listAgents: connect.NewClient[v1.ListAgentsRequest, v1.ListAgentsResponse](
			httpClient,
			baseURL+AgentServiceListAgentsProcedure,
			connect.WithSchema(agentServiceMethods.ByName("ListAgents")),
			connect.WithClientOptions(opts...),
		),
		getAgent: connect.NewClient[v1.GetAgentRequest, v1.GetAgentResponse](
			httpClient,
			baseURL+AgentServiceGetAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("GetAgent")),
			connect.WithClientOptions(opts...),
		),
		startAgent: connect.NewClient[v1.StartAgentRequest, v1.StartAgentResponse](
			httpClient,
			baseURL+AgentServiceStartAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("StartAgent")),
			connect.WithClientOptions(opts...),
		),
		stopAgent: connect.NewClient[v1.StopAgentRequest, v1.StopAgentResponse](
			httpClient,
			baseURL+AgentServiceStopAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("StopAgent")),
			connect.WithClientOptions(opts...),
		),
		getAgentStatus: connect.NewClient[v1.GetAgentStatusRequest, v1.GetAgentStatusResponse](
			httpClient,
			baseURL+AgentServiceGetAgentStatusProcedure,
			connect.WithSchema(agentServiceMethods.ByName("GetAgentStatus")),
			connect.WithClientOptions(opts...),
		),
		scaleAgent: connect.NewClient[v1.ScaleAgentRequest, v1.ScaleAgentResponse](
			httpClient,
			baseURL+AgentServiceScaleAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("ScaleAgent")),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	listAgents     *connect.Client[v1.ListAgentsRequest, v1.ListAgentsResponse]
	getAgent       *connect.Client[v1.GetAgentRequest, v1.GetAgentResponse]
	startAgent     *connect.Client[v1.StartAgentRequest, v1.StartAgentResponse]
	stopAgent      *connect.Client[v1.StopAgentRequest, v1.StopAgentResponse]
	getAgentStatus *connect.Client[v1.GetAgentStatusRequest, v1.GetAgentStatusResponse]
	scaleAgent     *connect.Client[v1.ScaleAgentRequest, v1.ScaleAgentResponse]
}

// ListAgents calls taskguild.v1.AgentService.ListAgents.
func (c *agentServiceClient) ListAgents(ctx context.Context, req *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// GetAgent calls taskguild.v1.AgentService.GetAgent.
func (c *agentServiceClient) GetAgent(ctx context.Context, req *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// StartAgent calls taskguild.v1.AgentService.StartAgent.
func (c *agentServiceClient) StartAgent(ctx context.Context, req *connect.Request[v1.StartAgentRequest]) (*connect.Response[v1.StartAgentResponse], error) {
	return c.startAgent.CallUnary(ctx, req)
}

// StopAgent calls taskguild.v1.AgentService.StopAgent.
func (c *agentServiceClient) StopAgent(ctx context.Context, req *connect.Request[v1.StopAgentRequest]) (*connect.Response[v1.StopAgentResponse], error) {
	return c.stopAgent.CallUnary(ctx, req)
}

// GetAgentStatus calls taskguild.v1.AgentService.GetAgentStatus.
func (c *agentServiceClient) GetAgentStatus(ctx context.Context, req *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.GetAgentStatusResponse], error) {
	return c.getAgentStatus.CallUnary(ctx, req)
}

// ScaleAgent calls taskguild.v1.AgentService.ScaleAgent.
func (c *agentServiceClient) ScaleAgent(ctx context.Context, req *connect.Request[v1.ScaleAgentRequest]) (*connect.Response[v1.ScaleAgentResponse], error) {
	return c.scaleAgent.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the taskguild.v1.AgentService service.
type AgentServiceHandler interface {
	// List all agents
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
	// Get agent details
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	// Start an agent
	StartAgent(context.Context, *connect.Request[v1.StartAgentRequest]) (*connect.Response[v1.StartAgentResponse], error)
	// Stop an agent
	StopAgent(context.Context, *connect.Request[v1.StopAgentRequest]) (*connect.Response[v1.StopAgentResponse], error)
	// Get agent status
	GetAgentStatus(context.Context, *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.GetAgentStatusResponse], error)
	// Scale agents
	ScaleAgent(context.Context, *connect.Request[v1.ScaleAgentRequest]) (*connect.Response[v1.ScaleAgentResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceMethods := v1.File_taskguild_v1_agentservice_proto.Services().ByName("AgentService").Methods()
	agentServiceListAgentsHandler := connect.NewUnaryHandler(
		AgentServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(agentServiceMethods.ByName("ListAgents")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetAgentHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(agentServiceMethods.ByName("GetAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceStartAgentHandler := connect.NewUnaryHandler(
		AgentServiceStartAgentProcedure,
		svc.StartAgent,
		connect.WithSchema(agentServiceMethods.ByName("StartAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceStopAgentHandler := connect.NewUnaryHandler(
		AgentServiceStopAgentProcedure,
		svc.StopAgent,
		connect.WithSchema(agentServiceMethods.ByName("StopAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetAgentStatusHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentStatusProcedure,
		svc.GetAgentStatus,
		connect.WithSchema(agentServiceMethods.ByName("GetAgentStatus")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceScaleAgentHandler := connect.NewUnaryHandler(
		AgentServiceScaleAgentProcedure,
		svc.ScaleAgent,
		connect.WithSchema(agentServiceMethods.ByName("ScaleAgent")),
		connect.WithHandlerOptions(opts...),
	)
	return "/taskguild.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceListAgentsProcedure:
			agentServiceListAgentsHandler.ServeHTTP(w, r)
		case AgentServiceGetAgentProcedure:
			agentServiceGetAgentHandler.ServeHTTP(w, r)
		case AgentServiceStartAgentProcedure:
			agentServiceStartAgentHandler.ServeHTTP(w, r)
		case AgentServiceStopAgentProcedure:
			agentServiceStopAgentHandler.ServeHTTP(w, r)
		case AgentServiceGetAgentStatusProcedure:
			agentServiceGetAgentStatusHandler.ServeHTTP(w, r)
		case AgentServiceScaleAgentProcedure:
			agentServiceScaleAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.AgentService.ListAgents is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.AgentService.GetAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) StartAgent(context.Context, *connect.Request[v1.StartAgentRequest]) (*connect.Response[v1.StartAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.AgentService.StartAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) StopAgent(context.Context, *connect.Request[v1.StopAgentRequest]) (*connect.Response[v1.StopAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.AgentService.StopAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetAgentStatus(context.Context, *connect.Request[v1.GetAgentStatusRequest]) (*connect.Response[v1.GetAgentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.AgentService.GetAgentStatus is not implemented"))
}

func (UnimplementedAgentServiceHandler) ScaleAgent(context.Context, *connect.Request[v1.ScaleAgentRequest]) (*connect.Response[v1.ScaleAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.AgentService.ScaleAgent is not implemented"))
}
