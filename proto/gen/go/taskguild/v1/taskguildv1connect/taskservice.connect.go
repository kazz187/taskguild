// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taskguild/v1/taskservice.proto

package taskguildv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kazz187/taskguild/proto/gen/go/taskguild/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "taskguild.v1.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceCreateTaskProcedure is the fully-qualified name of the TaskService's CreateTask RPC.
	TaskServiceCreateTaskProcedure = "/taskguild.v1.TaskService/CreateTask"
	// TaskServiceListTasksProcedure is the fully-qualified name of the TaskService's ListTasks RPC.
	TaskServiceListTasksProcedure = "/taskguild.v1.TaskService/ListTasks"
	// TaskServiceGetTaskProcedure is the fully-qualified name of the TaskService's GetTask RPC.
	TaskServiceGetTaskProcedure = "/taskguild.v1.TaskService/GetTask"
	// TaskServiceUpdateTaskProcedure is the fully-qualified name of the TaskService's UpdateTask RPC.
	TaskServiceUpdateTaskProcedure = "/taskguild.v1.TaskService/UpdateTask"
	// TaskServiceCloseTaskProcedure is the fully-qualified name of the TaskService's CloseTask RPC.
	TaskServiceCloseTaskProcedure = "/taskguild.v1.TaskService/CloseTask"
)

// TaskServiceClient is a client for the taskguild.v1.TaskService service.
type TaskServiceClient interface {
	// Create a new task
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	// List all tasks
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	// Get task details
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	// Update task status
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	// Close a task
	CloseTask(context.Context, *connect.Request[v1.CloseTaskRequest]) (*connect.Response[v1.CloseTaskResponse], error)
}

// NewTaskServiceClient constructs a client for the taskguild.v1.TaskService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	taskServiceMethods := v1.File_taskguild_v1_taskservice_proto.Services().ByName("TaskService").Methods()
	return &taskServiceClient{
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TaskServiceCreateTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+TaskServiceListTasksProcedure,
			connect.WithSchema(taskServiceMethods.ByName("ListTasks")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+TaskServiceGetTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TaskServiceUpdateTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("UpdateTask")),
			connect.WithClientOptions(opts...),
		),
		closeTask: connect.NewClient[v1.CloseTaskRequest, v1.CloseTaskResponse](
			httpClient,
			baseURL+TaskServiceCloseTaskProcedure,
			connect.WithSchema(taskServiceMethods.ByName("CloseTask")),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	createTask *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	listTasks  *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	getTask    *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	closeTask  *connect.Client[v1.CloseTaskRequest, v1.CloseTaskResponse]
}

// CreateTask calls taskguild.v1.TaskService.CreateTask.
func (c *taskServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// ListTasks calls taskguild.v1.TaskService.ListTasks.
func (c *taskServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// GetTask calls taskguild.v1.TaskService.GetTask.
func (c *taskServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// UpdateTask calls taskguild.v1.TaskService.UpdateTask.
func (c *taskServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// CloseTask calls taskguild.v1.TaskService.CloseTask.
func (c *taskServiceClient) CloseTask(ctx context.Context, req *connect.Request[v1.CloseTaskRequest]) (*connect.Response[v1.CloseTaskResponse], error) {
	return c.closeTask.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the taskguild.v1.TaskService service.
type TaskServiceHandler interface {
	// Create a new task
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	// List all tasks
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	// Get task details
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	// Update task status
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	// Close a task
	CloseTask(context.Context, *connect.Request[v1.CloseTaskRequest]) (*connect.Response[v1.CloseTaskResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceMethods := v1.File_taskguild_v1_taskservice_proto.Services().ByName("TaskService").Methods()
	taskServiceCreateTaskHandler := connect.NewUnaryHandler(
		TaskServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(taskServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceListTasksHandler := connect.NewUnaryHandler(
		TaskServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(taskServiceMethods.ByName("ListTasks")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceGetTaskHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(taskServiceMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TaskServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(taskServiceMethods.ByName("UpdateTask")),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceCloseTaskHandler := connect.NewUnaryHandler(
		TaskServiceCloseTaskProcedure,
		svc.CloseTask,
		connect.WithSchema(taskServiceMethods.ByName("CloseTask")),
		connect.WithHandlerOptions(opts...),
	)
	return "/taskguild.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceCreateTaskProcedure:
			taskServiceCreateTaskHandler.ServeHTTP(w, r)
		case TaskServiceListTasksProcedure:
			taskServiceListTasksHandler.ServeHTTP(w, r)
		case TaskServiceGetTaskProcedure:
			taskServiceGetTaskHandler.ServeHTTP(w, r)
		case TaskServiceUpdateTaskProcedure:
			taskServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TaskServiceCloseTaskProcedure:
			taskServiceCloseTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.TaskService.CreateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.TaskService.ListTasks is not implemented"))
}

func (UnimplementedTaskServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.TaskService.GetTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.TaskService.UpdateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) CloseTask(context.Context, *connect.Request[v1.CloseTaskRequest]) (*connect.Response[v1.CloseTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("taskguild.v1.TaskService.CloseTask is not implemented"))
}
